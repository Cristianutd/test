{
  "stats": {
    "suites": 1,
    "tests": 10,
    "passes": 10,
    "pending": 0,
    "failures": 0,
    "start": "2022-09-01T13:45:25.275Z",
    "end": "2022-09-01T13:45:30.257Z",
    "duration": 4465,
    "testsRegistered": 10,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "d65f9c80-bae0-4575-b576-b4583a0c09d6",
      "title": "",
      "fullFile": "cypress/integration/Features/API/httpStatusCodes.feature",
      "file": "cypress/integration/Features/API/httpStatusCodes.feature",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "df4808e3-a35d-4238-99f6-f3cb6348fe36",
          "title": "Verify APIs are returning correct HTTP status codes",
          "fullFile": "cypress/integration/Features/API/httpStatusCodes.feature",
          "file": "cypress/integration/Features/API/httpStatusCodes.feature",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "The 'Search all power plants' API is returning correct status code",
              "fullTitle": "Verify APIs are returning correct HTTP status codes The 'Search all power plants' API is returning correct status code",
              "timedOut": null,
              "duration": 921,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const state = window.testState;\nreturn cy\n  .then(() => state.onStartScenario(scenario, indexedSteps))\n  .then(() =>\n    resolveAndRunBeforeHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() =>\n    indexedSteps.forEach((step) =>\n      stepTest.call(this, state, step, rowData)\n    )\n  )\n  .then(() => state.onFinishScenario(scenario));",
              "err": {},
              "uuid": "1af538d0-63a7-4aea-a8c8-8b8fb761bbe1",
              "parentUUID": "df4808e3-a35d-4238-99f6-f3cb6348fe36",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "The 'Search top N power plants' API is returning correct status code",
              "fullTitle": "Verify APIs are returning correct HTTP status codes The 'Search top N power plants' API is returning correct status code",
              "timedOut": null,
              "duration": 1526,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const state = window.testState;\nreturn cy\n  .then(() => state.onStartScenario(scenario, indexedSteps))\n  .then(() =>\n    resolveAndRunBeforeHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() =>\n    indexedSteps.forEach((step) =>\n      stepTest.call(this, state, step, rowData)\n    )\n  )\n  .then(() => state.onFinishScenario(scenario));",
              "err": {},
              "uuid": "6cf5ed07-5b4c-442a-ad06-92903b8a817c",
              "parentUUID": "df4808e3-a35d-4238-99f6-f3cb6348fe36",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "The 'Gives the details of a power plant' API is returning correct status code",
              "fullTitle": "Verify APIs are returning correct HTTP status codes The 'Gives the details of a power plant' API is returning correct status code",
              "timedOut": null,
              "duration": 178,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const state = window.testState;\nreturn cy\n  .then(() => state.onStartScenario(scenario, indexedSteps))\n  .then(() =>\n    resolveAndRunBeforeHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() =>\n    indexedSteps.forEach((step) =>\n      stepTest.call(this, state, step, rowData)\n    )\n  )\n  .then(() => state.onFinishScenario(scenario));",
              "err": {},
              "uuid": "9c8f3687-d793-4063-ad51-eeca50cfcfdd",
              "parentUUID": "df4808e3-a35d-4238-99f6-f3cb6348fe36",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "The 'Search power plants in a state' API is returning correct status code (example #1)",
              "fullTitle": "Verify APIs are returning correct HTTP status codes The 'Search power plants in a state' API is returning correct status code (example #1)",
              "timedOut": null,
              "duration": 577,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const state = window.testState;\nreturn cy\n  .then(() => state.onStartScenario(scenario, indexedSteps))\n  .then(() =>\n    resolveAndRunBeforeHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() =>\n    indexedSteps.forEach((step) =>\n      stepTest.call(this, state, step, rowData)\n    )\n  )\n  .then(() => state.onFinishScenario(scenario));",
              "err": {},
              "uuid": "68c45c5a-a282-49ff-a293-145b803ab753",
              "parentUUID": "df4808e3-a35d-4238-99f6-f3cb6348fe36",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "The 'Search power plants in a state' API is returning correct status code (example #2)",
              "fullTitle": "Verify APIs are returning correct HTTP status codes The 'Search power plants in a state' API is returning correct status code (example #2)",
              "timedOut": null,
              "duration": 306,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const state = window.testState;\nreturn cy\n  .then(() => state.onStartScenario(scenario, indexedSteps))\n  .then(() =>\n    resolveAndRunBeforeHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() =>\n    indexedSteps.forEach((step) =>\n      stepTest.call(this, state, step, rowData)\n    )\n  )\n  .then(() => state.onFinishScenario(scenario));",
              "err": {},
              "uuid": "0b5d8c37-3f91-46af-9bb8-39e9d6a766cc",
              "parentUUID": "df4808e3-a35d-4238-99f6-f3cb6348fe36",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "The 'Search power plants in a state' API is returning correct status code (example #3)",
              "fullTitle": "Verify APIs are returning correct HTTP status codes The 'Search power plants in a state' API is returning correct status code (example #3)",
              "timedOut": null,
              "duration": 192,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const state = window.testState;\nreturn cy\n  .then(() => state.onStartScenario(scenario, indexedSteps))\n  .then(() =>\n    resolveAndRunBeforeHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() =>\n    indexedSteps.forEach((step) =>\n      stepTest.call(this, state, step, rowData)\n    )\n  )\n  .then(() => state.onFinishScenario(scenario));",
              "err": {},
              "uuid": "b1e04dd3-892d-4c28-8649-56d1eb9c0909",
              "parentUUID": "df4808e3-a35d-4238-99f6-f3cb6348fe36",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "The 'Search actual and percentage of plant's federal state' API is returning correct status code (example #1)",
              "fullTitle": "Verify APIs are returning correct HTTP status codes The 'Search actual and percentage of plant's federal state' API is returning correct status code (example #1)",
              "timedOut": null,
              "duration": 197,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const state = window.testState;\nreturn cy\n  .then(() => state.onStartScenario(scenario, indexedSteps))\n  .then(() =>\n    resolveAndRunBeforeHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() =>\n    indexedSteps.forEach((step) =>\n      stepTest.call(this, state, step, rowData)\n    )\n  )\n  .then(() => state.onFinishScenario(scenario));",
              "err": {},
              "uuid": "ffe1a3e3-cb44-4356-a4f7-58c27f89a954",
              "parentUUID": "df4808e3-a35d-4238-99f6-f3cb6348fe36",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "The 'Search actual and percentage of plant's federal state' API is returning correct status code (example #2)",
              "fullTitle": "Verify APIs are returning correct HTTP status codes The 'Search actual and percentage of plant's federal state' API is returning correct status code (example #2)",
              "timedOut": null,
              "duration": 114,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const state = window.testState;\nreturn cy\n  .then(() => state.onStartScenario(scenario, indexedSteps))\n  .then(() =>\n    resolveAndRunBeforeHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() =>\n    indexedSteps.forEach((step) =>\n      stepTest.call(this, state, step, rowData)\n    )\n  )\n  .then(() => state.onFinishScenario(scenario));",
              "err": {},
              "uuid": "a3688176-1af2-4dc3-baef-0cd1e658a292",
              "parentUUID": "df4808e3-a35d-4238-99f6-f3cb6348fe36",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "The 'Search actual and percentage of plant's federal state' API is returning correct status code (example #3)",
              "fullTitle": "Verify APIs are returning correct HTTP status codes The 'Search actual and percentage of plant's federal state' API is returning correct status code (example #3)",
              "timedOut": null,
              "duration": 339,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const state = window.testState;\nreturn cy\n  .then(() => state.onStartScenario(scenario, indexedSteps))\n  .then(() =>\n    resolveAndRunBeforeHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() =>\n    indexedSteps.forEach((step) =>\n      stepTest.call(this, state, step, rowData)\n    )\n  )\n  .then(() => state.onFinishScenario(scenario));",
              "err": {},
              "uuid": "3d3e4f4e-b5d7-431b-9ab1-d12a122a9436",
              "parentUUID": "df4808e3-a35d-4238-99f6-f3cb6348fe36",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "The 'Provide array of unique states' API is returning correct status code",
              "fullTitle": "Verify APIs are returning correct HTTP status codes The 'Provide array of unique states' API is returning correct status code",
              "timedOut": null,
              "duration": 115,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const state = window.testState;\nreturn cy\n  .then(() => state.onStartScenario(scenario, indexedSteps))\n  .then(() =>\n    resolveAndRunBeforeHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() =>\n    indexedSteps.forEach((step) =>\n      stepTest.call(this, state, step, rowData)\n    )\n  )\n  .then(() => state.onFinishScenario(scenario));",
              "err": {},
              "uuid": "0b023f0a-f9f9-494c-aabb-c70b37816b08",
              "parentUUID": "df4808e3-a35d-4238-99f6-f3cb6348fe36",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "1af538d0-63a7-4aea-a8c8-8b8fb761bbe1",
            "6cf5ed07-5b4c-442a-ad06-92903b8a817c",
            "9c8f3687-d793-4063-ad51-eeca50cfcfdd",
            "68c45c5a-a282-49ff-a293-145b803ab753",
            "0b5d8c37-3f91-46af-9bb8-39e9d6a766cc",
            "b1e04dd3-892d-4c28-8649-56d1eb9c0909",
            "ffe1a3e3-cb44-4356-a4f7-58c27f89a954",
            "a3688176-1af2-4dc3-baef-0cd1e658a292",
            "3d3e4f4e-b5d7-431b-9ab1-d12a122a9436",
            "0b023f0a-f9f9-494c-aabb-c70b37816b08"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 4465,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "7.0.1"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": false,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "6.3.1"
    },
    "marge": {
      "options": {
        "reportDir": "cypress/htmlreport/.jsons",
        "charts": true,
        "overwrite": false,
        "showPending": false,
        "showSkipped": true,
        "saveJson": true,
        "html": false,
        "json": true
      },
      "version": "5.2.0"
    }
  }
}
