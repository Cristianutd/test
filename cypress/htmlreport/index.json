{
  "stats": {
    "suites": 1,
    "tests": 6,
    "passes": 6,
    "pending": 0,
    "failures": 0,
    "start": "2022-09-01T13:23:22.151Z",
    "end": "2022-09-01T13:23:28.010Z",
    "duration": 5342,
    "testsRegistered": 6,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "946ab8e9-34b0-40a1-aef5-b6cd9840d2d3",
      "title": "",
      "fullFile": "cypress/integration/Features/API/validateSchemas.feature",
      "file": "cypress/integration/Features/API/validateSchemas.feature",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "1218eae9-9d2b-40a2-b2c2-ce7de9f1f552",
          "title": "Verify APIs are returning the correct response by validating its schema",
          "fullFile": "cypress/integration/Features/API/validateSchemas.feature",
          "file": "cypress/integration/Features/API/validateSchemas.feature",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "The 'Search all power plants' API response has the correct json schema",
              "fullTitle": "Verify APIs are returning the correct response by validating its schema The 'Search all power plants' API response has the correct json schema",
              "timedOut": null,
              "duration": 1249,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const state = window.testState;\nreturn cy\n  .then(() => state.onStartScenario(scenario, indexedSteps))\n  .then(() =>\n    resolveAndRunBeforeHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() =>\n    indexedSteps.forEach((step) =>\n      stepTest.call(this, state, step, rowData)\n    )\n  )\n  .then(() => state.onFinishScenario(scenario));",
              "err": {},
              "uuid": "83068bb8-620b-4bf7-8eff-a8f887e24e4f",
              "parentUUID": "1218eae9-9d2b-40a2-b2c2-ce7de9f1f552",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "The 'Search top N power plants' API response has the correct json schema",
              "fullTitle": "Verify APIs are returning the correct response by validating its schema The 'Search top N power plants' API response has the correct json schema",
              "timedOut": null,
              "duration": 1597,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const state = window.testState;\nreturn cy\n  .then(() => state.onStartScenario(scenario, indexedSteps))\n  .then(() =>\n    resolveAndRunBeforeHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() =>\n    indexedSteps.forEach((step) =>\n      stepTest.call(this, state, step, rowData)\n    )\n  )\n  .then(() => state.onFinishScenario(scenario));",
              "err": {},
              "uuid": "1703a036-1d54-4fc7-9e91-5d6eb10cb28e",
              "parentUUID": "1218eae9-9d2b-40a2-b2c2-ce7de9f1f552",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "The 'Gives the details of a power plant' API response has the correct json schema",
              "fullTitle": "Verify APIs are returning the correct response by validating its schema The 'Gives the details of a power plant' API response has the correct json schema",
              "timedOut": null,
              "duration": 281,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const state = window.testState;\nreturn cy\n  .then(() => state.onStartScenario(scenario, indexedSteps))\n  .then(() =>\n    resolveAndRunBeforeHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() =>\n    indexedSteps.forEach((step) =>\n      stepTest.call(this, state, step, rowData)\n    )\n  )\n  .then(() => state.onFinishScenario(scenario));",
              "err": {},
              "uuid": "4e771cc2-7bf2-4aad-b678-f7456e7e17c0",
              "parentUUID": "1218eae9-9d2b-40a2-b2c2-ce7de9f1f552",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "The 'Search power plants in a state' API response has the correct json schema (example #1)",
              "fullTitle": "Verify APIs are returning the correct response by validating its schema The 'Search power plants in a state' API response has the correct json schema (example #1)",
              "timedOut": null,
              "duration": 1297,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const state = window.testState;\nreturn cy\n  .then(() => state.onStartScenario(scenario, indexedSteps))\n  .then(() =>\n    resolveAndRunBeforeHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() =>\n    indexedSteps.forEach((step) =>\n      stepTest.call(this, state, step, rowData)\n    )\n  )\n  .then(() => state.onFinishScenario(scenario));",
              "err": {},
              "uuid": "4dc9e7a8-07ac-43ed-b00a-d055e51e2e20",
              "parentUUID": "1218eae9-9d2b-40a2-b2c2-ce7de9f1f552",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "The 'Search actual and percentage of plant's federal state' API response has the correct json schema (example #1)",
              "fullTitle": "Verify APIs are returning the correct response by validating its schema The 'Search actual and percentage of plant's federal state' API response has the correct json schema (example #1)",
              "timedOut": null,
              "duration": 731,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const state = window.testState;\nreturn cy\n  .then(() => state.onStartScenario(scenario, indexedSteps))\n  .then(() =>\n    resolveAndRunBeforeHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() =>\n    indexedSteps.forEach((step) =>\n      stepTest.call(this, state, step, rowData)\n    )\n  )\n  .then(() => state.onFinishScenario(scenario));",
              "err": {},
              "uuid": "b0d83655-558d-4687-aec1-a01f1f31138e",
              "parentUUID": "1218eae9-9d2b-40a2-b2c2-ce7de9f1f552",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "The 'Provide array of unique states' API response has the correct json schema",
              "fullTitle": "Verify APIs are returning the correct response by validating its schema The 'Provide array of unique states' API response has the correct json schema",
              "timedOut": null,
              "duration": 187,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const state = window.testState;\nreturn cy\n  .then(() => state.onStartScenario(scenario, indexedSteps))\n  .then(() =>\n    resolveAndRunBeforeHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() =>\n    indexedSteps.forEach((step) =>\n      stepTest.call(this, state, step, rowData)\n    )\n  )\n  .then(() => state.onFinishScenario(scenario));",
              "err": {},
              "uuid": "bf22260a-91c3-4936-8111-78a0077e76f4",
              "parentUUID": "1218eae9-9d2b-40a2-b2c2-ce7de9f1f552",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "83068bb8-620b-4bf7-8eff-a8f887e24e4f",
            "1703a036-1d54-4fc7-9e91-5d6eb10cb28e",
            "4e771cc2-7bf2-4aad-b678-f7456e7e17c0",
            "4dc9e7a8-07ac-43ed-b00a-d055e51e2e20",
            "b0d83655-558d-4687-aec1-a01f1f31138e",
            "bf22260a-91c3-4936-8111-78a0077e76f4"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 5342,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "7.0.1"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": false,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "6.3.1"
    },
    "marge": {
      "options": {
        "reportDir": "cypress/htmlreport/.jsons",
        "charts": true,
        "overwrite": false,
        "showPending": false,
        "showSkipped": true,
        "saveJson": true,
        "html": false,
        "json": true
      },
      "version": "5.2.0"
    }
  }
}
