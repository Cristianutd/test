{
  "stats": {
    "suites": 1,
    "tests": 10,
    "passes": 10,
    "pending": 0,
    "failures": 0,
    "start": "2022-09-01T13:54:57.018Z",
    "end": "2022-09-01T13:55:02.021Z",
    "duration": 4419,
    "testsRegistered": 10,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "32ea93a9-a6c3-4078-acdd-81a57dadc456",
      "title": "",
      "fullFile": "cypress/integration/Features/API/httpStatusCodes.feature",
      "file": "cypress/integration/Features/API/httpStatusCodes.feature",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "0ab6e518-e5a8-4888-8f48-e06be942f1e2",
          "title": "Verify APIs are returning correct HTTP status codes",
          "fullFile": "cypress/integration/Features/API/httpStatusCodes.feature",
          "file": "cypress/integration/Features/API/httpStatusCodes.feature",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "The 'Search all power plants' API is returning correct status code",
              "fullTitle": "Verify APIs are returning correct HTTP status codes The 'Search all power plants' API is returning correct status code",
              "timedOut": null,
              "duration": 1011,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const state = window.testState;\nreturn cy\n  .then(() => state.onStartScenario(scenario, indexedSteps))\n  .then(() =>\n    resolveAndRunBeforeHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() =>\n    indexedSteps.forEach((step) =>\n      stepTest.call(this, state, step, rowData)\n    )\n  )\n  .then(() => state.onFinishScenario(scenario));",
              "err": {},
              "uuid": "80999b34-1633-4dcd-a591-3f5a4d93a817",
              "parentUUID": "0ab6e518-e5a8-4888-8f48-e06be942f1e2",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "The 'Search top N power plants' API is returning correct status code",
              "fullTitle": "Verify APIs are returning correct HTTP status codes The 'Search top N power plants' API is returning correct status code",
              "timedOut": null,
              "duration": 1436,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const state = window.testState;\nreturn cy\n  .then(() => state.onStartScenario(scenario, indexedSteps))\n  .then(() =>\n    resolveAndRunBeforeHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() =>\n    indexedSteps.forEach((step) =>\n      stepTest.call(this, state, step, rowData)\n    )\n  )\n  .then(() => state.onFinishScenario(scenario));",
              "err": {},
              "uuid": "24cfedfa-49bd-4e97-9147-ef365a64b4d2",
              "parentUUID": "0ab6e518-e5a8-4888-8f48-e06be942f1e2",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "The 'Gives the details of a power plant' API is returning correct status code",
              "fullTitle": "Verify APIs are returning correct HTTP status codes The 'Gives the details of a power plant' API is returning correct status code",
              "timedOut": null,
              "duration": 141,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const state = window.testState;\nreturn cy\n  .then(() => state.onStartScenario(scenario, indexedSteps))\n  .then(() =>\n    resolveAndRunBeforeHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() =>\n    indexedSteps.forEach((step) =>\n      stepTest.call(this, state, step, rowData)\n    )\n  )\n  .then(() => state.onFinishScenario(scenario));",
              "err": {},
              "uuid": "f7200dea-98a4-43ee-b10f-30403507484b",
              "parentUUID": "0ab6e518-e5a8-4888-8f48-e06be942f1e2",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "The 'Search power plants in a state' API is returning correct status code (example #1)",
              "fullTitle": "Verify APIs are returning correct HTTP status codes The 'Search power plants in a state' API is returning correct status code (example #1)",
              "timedOut": null,
              "duration": 468,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const state = window.testState;\nreturn cy\n  .then(() => state.onStartScenario(scenario, indexedSteps))\n  .then(() =>\n    resolveAndRunBeforeHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() =>\n    indexedSteps.forEach((step) =>\n      stepTest.call(this, state, step, rowData)\n    )\n  )\n  .then(() => state.onFinishScenario(scenario));",
              "err": {},
              "uuid": "f6fc3aee-680b-4571-837a-f03db3a2af49",
              "parentUUID": "0ab6e518-e5a8-4888-8f48-e06be942f1e2",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "The 'Search power plants in a state' API is returning correct status code (example #2)",
              "fullTitle": "Verify APIs are returning correct HTTP status codes The 'Search power plants in a state' API is returning correct status code (example #2)",
              "timedOut": null,
              "duration": 267,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const state = window.testState;\nreturn cy\n  .then(() => state.onStartScenario(scenario, indexedSteps))\n  .then(() =>\n    resolveAndRunBeforeHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() =>\n    indexedSteps.forEach((step) =>\n      stepTest.call(this, state, step, rowData)\n    )\n  )\n  .then(() => state.onFinishScenario(scenario));",
              "err": {},
              "uuid": "c443cdb8-0d4f-44a6-91bc-83951a28d250",
              "parentUUID": "0ab6e518-e5a8-4888-8f48-e06be942f1e2",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "The 'Search power plants in a state' API is returning correct status code (example #3)",
              "fullTitle": "Verify APIs are returning correct HTTP status codes The 'Search power plants in a state' API is returning correct status code (example #3)",
              "timedOut": null,
              "duration": 253,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const state = window.testState;\nreturn cy\n  .then(() => state.onStartScenario(scenario, indexedSteps))\n  .then(() =>\n    resolveAndRunBeforeHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() =>\n    indexedSteps.forEach((step) =>\n      stepTest.call(this, state, step, rowData)\n    )\n  )\n  .then(() => state.onFinishScenario(scenario));",
              "err": {},
              "uuid": "26615507-239f-4b9c-a683-b3e3c743de25",
              "parentUUID": "0ab6e518-e5a8-4888-8f48-e06be942f1e2",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "The 'Search actual and percentage of plant's federal state' API is returning correct status code (example #1)",
              "fullTitle": "Verify APIs are returning correct HTTP status codes The 'Search actual and percentage of plant's federal state' API is returning correct status code (example #1)",
              "timedOut": null,
              "duration": 198,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const state = window.testState;\nreturn cy\n  .then(() => state.onStartScenario(scenario, indexedSteps))\n  .then(() =>\n    resolveAndRunBeforeHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() =>\n    indexedSteps.forEach((step) =>\n      stepTest.call(this, state, step, rowData)\n    )\n  )\n  .then(() => state.onFinishScenario(scenario));",
              "err": {},
              "uuid": "45fd20f6-8d23-4340-ba45-706536a49c31",
              "parentUUID": "0ab6e518-e5a8-4888-8f48-e06be942f1e2",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "The 'Search actual and percentage of plant's federal state' API is returning correct status code (example #2)",
              "fullTitle": "Verify APIs are returning correct HTTP status codes The 'Search actual and percentage of plant's federal state' API is returning correct status code (example #2)",
              "timedOut": null,
              "duration": 193,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const state = window.testState;\nreturn cy\n  .then(() => state.onStartScenario(scenario, indexedSteps))\n  .then(() =>\n    resolveAndRunBeforeHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() =>\n    indexedSteps.forEach((step) =>\n      stepTest.call(this, state, step, rowData)\n    )\n  )\n  .then(() => state.onFinishScenario(scenario));",
              "err": {},
              "uuid": "cb181f75-f223-4097-8b02-1f3e8f3ad36e",
              "parentUUID": "0ab6e518-e5a8-4888-8f48-e06be942f1e2",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "The 'Search actual and percentage of plant's federal state' API is returning correct status code (example #3)",
              "fullTitle": "Verify APIs are returning correct HTTP status codes The 'Search actual and percentage of plant's federal state' API is returning correct status code (example #3)",
              "timedOut": null,
              "duration": 359,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const state = window.testState;\nreturn cy\n  .then(() => state.onStartScenario(scenario, indexedSteps))\n  .then(() =>\n    resolveAndRunBeforeHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() =>\n    indexedSteps.forEach((step) =>\n      stepTest.call(this, state, step, rowData)\n    )\n  )\n  .then(() => state.onFinishScenario(scenario));",
              "err": {},
              "uuid": "142f8769-3637-4b25-81c6-66397965cf5a",
              "parentUUID": "0ab6e518-e5a8-4888-8f48-e06be942f1e2",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "The 'Provide array of unique states' API is returning correct status code",
              "fullTitle": "Verify APIs are returning correct HTTP status codes The 'Provide array of unique states' API is returning correct status code",
              "timedOut": null,
              "duration": 93,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const state = window.testState;\nreturn cy\n  .then(() => state.onStartScenario(scenario, indexedSteps))\n  .then(() =>\n    resolveAndRunBeforeHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() =>\n    indexedSteps.forEach((step) =>\n      stepTest.call(this, state, step, rowData)\n    )\n  )\n  .then(() => state.onFinishScenario(scenario));",
              "err": {},
              "uuid": "08a124f5-4030-4fde-b648-8d004526face",
              "parentUUID": "0ab6e518-e5a8-4888-8f48-e06be942f1e2",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "80999b34-1633-4dcd-a591-3f5a4d93a817",
            "24cfedfa-49bd-4e97-9147-ef365a64b4d2",
            "f7200dea-98a4-43ee-b10f-30403507484b",
            "f6fc3aee-680b-4571-837a-f03db3a2af49",
            "c443cdb8-0d4f-44a6-91bc-83951a28d250",
            "26615507-239f-4b9c-a683-b3e3c743de25",
            "45fd20f6-8d23-4340-ba45-706536a49c31",
            "cb181f75-f223-4097-8b02-1f3e8f3ad36e",
            "142f8769-3637-4b25-81c6-66397965cf5a",
            "08a124f5-4030-4fde-b648-8d004526face"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 4419,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "7.0.1"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": false,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "6.3.1"
    },
    "marge": {
      "options": {
        "reportDir": "cypress/htmlreport/.jsons",
        "charts": true,
        "overwrite": false,
        "showPending": false,
        "showSkipped": true,
        "saveJson": true,
        "html": false,
        "json": true
      },
      "version": "5.2.0"
    }
  }
}
