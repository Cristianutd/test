{
  "stats": {
    "suites": 1,
    "tests": 10,
    "passes": 10,
    "pending": 0,
    "failures": 0,
    "start": "2022-09-01T13:40:12.095Z",
    "end": "2022-09-01T13:40:17.060Z",
    "duration": 4654,
    "testsRegistered": 10,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "2ea69850-180b-470b-abed-caf3275fce40",
      "title": "",
      "fullFile": "cypress/integration/Features/API/httpStatusCodes.feature",
      "file": "cypress/integration/Features/API/httpStatusCodes.feature",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "9e406a68-e4c8-4539-a89f-4e190359add9",
          "title": "Verify APIs are returning correct HTTP status codes",
          "fullFile": "cypress/integration/Features/API/httpStatusCodes.feature",
          "file": "cypress/integration/Features/API/httpStatusCodes.feature",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "The 'Search all power plants' API is returning correct status code",
              "fullTitle": "Verify APIs are returning correct HTTP status codes The 'Search all power plants' API is returning correct status code",
              "timedOut": null,
              "duration": 972,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const state = window.testState;\nreturn cy\n  .then(() => state.onStartScenario(scenario, indexedSteps))\n  .then(() =>\n    resolveAndRunBeforeHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() =>\n    indexedSteps.forEach((step) =>\n      stepTest.call(this, state, step, rowData)\n    )\n  )\n  .then(() => state.onFinishScenario(scenario));",
              "err": {},
              "uuid": "c67a2640-c25f-4af6-9be2-99e39998e7f7",
              "parentUUID": "9e406a68-e4c8-4539-a89f-4e190359add9",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "The 'Search top N power plants' API is returning correct status code",
              "fullTitle": "Verify APIs are returning correct HTTP status codes The 'Search top N power plants' API is returning correct status code",
              "timedOut": null,
              "duration": 1654,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const state = window.testState;\nreturn cy\n  .then(() => state.onStartScenario(scenario, indexedSteps))\n  .then(() =>\n    resolveAndRunBeforeHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() =>\n    indexedSteps.forEach((step) =>\n      stepTest.call(this, state, step, rowData)\n    )\n  )\n  .then(() => state.onFinishScenario(scenario));",
              "err": {},
              "uuid": "cd17f1c4-36a2-4575-a161-3455a45336ca",
              "parentUUID": "9e406a68-e4c8-4539-a89f-4e190359add9",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "The 'Gives the details of a power plant' API is returning correct status code",
              "fullTitle": "Verify APIs are returning correct HTTP status codes The 'Gives the details of a power plant' API is returning correct status code",
              "timedOut": null,
              "duration": 167,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const state = window.testState;\nreturn cy\n  .then(() => state.onStartScenario(scenario, indexedSteps))\n  .then(() =>\n    resolveAndRunBeforeHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() =>\n    indexedSteps.forEach((step) =>\n      stepTest.call(this, state, step, rowData)\n    )\n  )\n  .then(() => state.onFinishScenario(scenario));",
              "err": {},
              "uuid": "c831ced6-3f43-4b61-a616-29dfcaa36998",
              "parentUUID": "9e406a68-e4c8-4539-a89f-4e190359add9",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "The 'Search power plants in a state' API is returning correct status code (example #1)",
              "fullTitle": "Verify APIs are returning correct HTTP status codes The 'Search power plants in a state' API is returning correct status code (example #1)",
              "timedOut": null,
              "duration": 411,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const state = window.testState;\nreturn cy\n  .then(() => state.onStartScenario(scenario, indexedSteps))\n  .then(() =>\n    resolveAndRunBeforeHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() =>\n    indexedSteps.forEach((step) =>\n      stepTest.call(this, state, step, rowData)\n    )\n  )\n  .then(() => state.onFinishScenario(scenario));",
              "err": {},
              "uuid": "abaa30b6-3fe2-4eb4-9bde-1554cb4ae5d9",
              "parentUUID": "9e406a68-e4c8-4539-a89f-4e190359add9",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "The 'Search power plants in a state' API is returning correct status code (example #2)",
              "fullTitle": "Verify APIs are returning correct HTTP status codes The 'Search power plants in a state' API is returning correct status code (example #2)",
              "timedOut": null,
              "duration": 367,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const state = window.testState;\nreturn cy\n  .then(() => state.onStartScenario(scenario, indexedSteps))\n  .then(() =>\n    resolveAndRunBeforeHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() =>\n    indexedSteps.forEach((step) =>\n      stepTest.call(this, state, step, rowData)\n    )\n  )\n  .then(() => state.onFinishScenario(scenario));",
              "err": {},
              "uuid": "ff36985a-9b97-412b-93e2-7bbc3145a6b7",
              "parentUUID": "9e406a68-e4c8-4539-a89f-4e190359add9",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "The 'Search power plants in a state' API is returning correct status code (example #3)",
              "fullTitle": "Verify APIs are returning correct HTTP status codes The 'Search power plants in a state' API is returning correct status code (example #3)",
              "timedOut": null,
              "duration": 140,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const state = window.testState;\nreturn cy\n  .then(() => state.onStartScenario(scenario, indexedSteps))\n  .then(() =>\n    resolveAndRunBeforeHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() =>\n    indexedSteps.forEach((step) =>\n      stepTest.call(this, state, step, rowData)\n    )\n  )\n  .then(() => state.onFinishScenario(scenario));",
              "err": {},
              "uuid": "8a8af1ac-6f2c-4515-bada-443474074647",
              "parentUUID": "9e406a68-e4c8-4539-a89f-4e190359add9",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "The 'Search actual and percentage of plant's federal state' API is returning correct status code (example #1)",
              "fullTitle": "Verify APIs are returning correct HTTP status codes The 'Search actual and percentage of plant's federal state' API is returning correct status code (example #1)",
              "timedOut": null,
              "duration": 353,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const state = window.testState;\nreturn cy\n  .then(() => state.onStartScenario(scenario, indexedSteps))\n  .then(() =>\n    resolveAndRunBeforeHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() =>\n    indexedSteps.forEach((step) =>\n      stepTest.call(this, state, step, rowData)\n    )\n  )\n  .then(() => state.onFinishScenario(scenario));",
              "err": {},
              "uuid": "6a27f3b3-a492-427a-9b0f-2fb3b0c503eb",
              "parentUUID": "9e406a68-e4c8-4539-a89f-4e190359add9",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "The 'Search actual and percentage of plant's federal state' API is returning correct status code (example #2)",
              "fullTitle": "Verify APIs are returning correct HTTP status codes The 'Search actual and percentage of plant's federal state' API is returning correct status code (example #2)",
              "timedOut": null,
              "duration": 139,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const state = window.testState;\nreturn cy\n  .then(() => state.onStartScenario(scenario, indexedSteps))\n  .then(() =>\n    resolveAndRunBeforeHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() =>\n    indexedSteps.forEach((step) =>\n      stepTest.call(this, state, step, rowData)\n    )\n  )\n  .then(() => state.onFinishScenario(scenario));",
              "err": {},
              "uuid": "469ed237-32f5-4919-968f-ce8e572d93d4",
              "parentUUID": "9e406a68-e4c8-4539-a89f-4e190359add9",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "The 'Search actual and percentage of plant's federal state' API is returning correct status code (example #3)",
              "fullTitle": "Verify APIs are returning correct HTTP status codes The 'Search actual and percentage of plant's federal state' API is returning correct status code (example #3)",
              "timedOut": null,
              "duration": 363,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const state = window.testState;\nreturn cy\n  .then(() => state.onStartScenario(scenario, indexedSteps))\n  .then(() =>\n    resolveAndRunBeforeHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() =>\n    indexedSteps.forEach((step) =>\n      stepTest.call(this, state, step, rowData)\n    )\n  )\n  .then(() => state.onFinishScenario(scenario));",
              "err": {},
              "uuid": "c9ffdfc3-a356-4971-8481-723ecbe7385f",
              "parentUUID": "9e406a68-e4c8-4539-a89f-4e190359add9",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "The 'Provide array of unique states' API is returning correct status code",
              "fullTitle": "Verify APIs are returning correct HTTP status codes The 'Provide array of unique states' API is returning correct status code",
              "timedOut": null,
              "duration": 88,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const state = window.testState;\nreturn cy\n  .then(() => state.onStartScenario(scenario, indexedSteps))\n  .then(() =>\n    resolveAndRunBeforeHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() =>\n    indexedSteps.forEach((step) =>\n      stepTest.call(this, state, step, rowData)\n    )\n  )\n  .then(() => state.onFinishScenario(scenario));",
              "err": {},
              "uuid": "24a3d3d9-ffb9-4860-a3c6-91fd36ce7dd7",
              "parentUUID": "9e406a68-e4c8-4539-a89f-4e190359add9",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "c67a2640-c25f-4af6-9be2-99e39998e7f7",
            "cd17f1c4-36a2-4575-a161-3455a45336ca",
            "c831ced6-3f43-4b61-a616-29dfcaa36998",
            "abaa30b6-3fe2-4eb4-9bde-1554cb4ae5d9",
            "ff36985a-9b97-412b-93e2-7bbc3145a6b7",
            "8a8af1ac-6f2c-4515-bada-443474074647",
            "6a27f3b3-a492-427a-9b0f-2fb3b0c503eb",
            "469ed237-32f5-4919-968f-ce8e572d93d4",
            "c9ffdfc3-a356-4971-8481-723ecbe7385f",
            "24a3d3d9-ffb9-4860-a3c6-91fd36ce7dd7"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 4654,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "7.0.1"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": false,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "6.3.1"
    },
    "marge": {
      "options": {
        "reportDir": "cypress/htmlreport/.jsons",
        "charts": true,
        "overwrite": false,
        "showPending": false,
        "showSkipped": true,
        "saveJson": true,
        "html": false,
        "json": true
      },
      "version": "5.2.0"
    }
  }
}
