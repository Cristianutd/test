{
  "stats": {
    "suites": 4,
    "tests": 37,
    "passes": 37,
    "pending": 0,
    "failures": 0,
    "start": "2022-09-02T14:01:00.506Z",
    "end": "2022-09-02T14:02:58.391Z",
    "duration": 69716,
    "testsRegistered": 37,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "e2a53c86-952a-4760-9d29-a50fb4ae12bc",
      "title": "",
      "fullFile": "cypress/integration/Features/API/listOfPowerPlants.feature",
      "file": "cypress/integration/Features/API/listOfPowerPlants.feature",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "f30ed455-deb8-4956-a789-995cffae3603",
          "title": "Verify List of Powerplants API",
          "fullFile": "cypress/integration/Features/API/listOfPowerPlants.feature",
          "file": "cypress/integration/Features/API/listOfPowerPlants.feature",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "The list of Power Plants should be a list/array",
              "fullTitle": "Verify List of Powerplants API The list of Power Plants should be a list/array",
              "timedOut": null,
              "duration": 1659,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const state = window.testState;\nreturn cy\n  .then(() => state.onStartScenario(scenario, indexedSteps))\n  .then(() =>\n    resolveAndRunBeforeHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() =>\n    indexedSteps.forEach((step) =>\n      stepTest.call(this, state, step, rowData)\n    )\n  )\n  .then(() => state.onFinishScenario(scenario));",
              "err": {},
              "uuid": "296325b8-6bf2-4ae6-ab15-f34cfd8de9d2",
              "parentUUID": "f30ed455-deb8-4956-a789-995cffae3603",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "296325b8-6bf2-4ae6-ab15-f34cfd8de9d2"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1659,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "78b1eda7-a9e2-402c-9399-774ae755be1b",
      "title": "",
      "fullFile": "cypress/integration/Features/API/validateSchemas.feature",
      "file": "cypress/integration/Features/API/validateSchemas.feature",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "3c024005-051d-480c-9b21-d8b1d09ad18c",
          "title": "Verify APIs are returning the correct response by validating its schema",
          "fullFile": "cypress/integration/Features/API/validateSchemas.feature",
          "file": "cypress/integration/Features/API/validateSchemas.feature",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "The 'Search all power plants' API response has the correct json schema",
              "fullTitle": "Verify APIs are returning the correct response by validating its schema The 'Search all power plants' API response has the correct json schema",
              "timedOut": null,
              "duration": 1248,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const state = window.testState;\nreturn cy\n  .then(() => state.onStartScenario(scenario, indexedSteps))\n  .then(() =>\n    resolveAndRunBeforeHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() =>\n    indexedSteps.forEach((step) =>\n      stepTest.call(this, state, step, rowData)\n    )\n  )\n  .then(() => state.onFinishScenario(scenario));",
              "err": {},
              "uuid": "3cc52b30-d321-43ca-b528-0a9149838289",
              "parentUUID": "3c024005-051d-480c-9b21-d8b1d09ad18c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "The 'Search top N power plants' API response has the correct json schema",
              "fullTitle": "Verify APIs are returning the correct response by validating its schema The 'Search top N power plants' API response has the correct json schema",
              "timedOut": null,
              "duration": 1576,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const state = window.testState;\nreturn cy\n  .then(() => state.onStartScenario(scenario, indexedSteps))\n  .then(() =>\n    resolveAndRunBeforeHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() =>\n    indexedSteps.forEach((step) =>\n      stepTest.call(this, state, step, rowData)\n    )\n  )\n  .then(() => state.onFinishScenario(scenario));",
              "err": {},
              "uuid": "01e081fe-8e31-4ad5-8cff-e15b4681aed4",
              "parentUUID": "3c024005-051d-480c-9b21-d8b1d09ad18c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "The 'Gives the details of a power plant' API response has the correct json schema",
              "fullTitle": "Verify APIs are returning the correct response by validating its schema The 'Gives the details of a power plant' API response has the correct json schema",
              "timedOut": null,
              "duration": 292,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const state = window.testState;\nreturn cy\n  .then(() => state.onStartScenario(scenario, indexedSteps))\n  .then(() =>\n    resolveAndRunBeforeHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() =>\n    indexedSteps.forEach((step) =>\n      stepTest.call(this, state, step, rowData)\n    )\n  )\n  .then(() => state.onFinishScenario(scenario));",
              "err": {},
              "uuid": "8980d430-2c36-437d-9575-e420408a3afc",
              "parentUUID": "3c024005-051d-480c-9b21-d8b1d09ad18c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "The 'Search power plants in a state' API response has the correct json schema (example #1)",
              "fullTitle": "Verify APIs are returning the correct response by validating its schema The 'Search power plants in a state' API response has the correct json schema (example #1)",
              "timedOut": null,
              "duration": 1244,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const state = window.testState;\nreturn cy\n  .then(() => state.onStartScenario(scenario, indexedSteps))\n  .then(() =>\n    resolveAndRunBeforeHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() =>\n    indexedSteps.forEach((step) =>\n      stepTest.call(this, state, step, rowData)\n    )\n  )\n  .then(() => state.onFinishScenario(scenario));",
              "err": {},
              "uuid": "65fb9062-1b38-4748-9491-3a61075af594",
              "parentUUID": "3c024005-051d-480c-9b21-d8b1d09ad18c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "The 'Search actual and percentage of plant's federal state' API response has the correct json schema (example #1)",
              "fullTitle": "Verify APIs are returning the correct response by validating its schema The 'Search actual and percentage of plant's federal state' API response has the correct json schema (example #1)",
              "timedOut": null,
              "duration": 760,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const state = window.testState;\nreturn cy\n  .then(() => state.onStartScenario(scenario, indexedSteps))\n  .then(() =>\n    resolveAndRunBeforeHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() =>\n    indexedSteps.forEach((step) =>\n      stepTest.call(this, state, step, rowData)\n    )\n  )\n  .then(() => state.onFinishScenario(scenario));",
              "err": {},
              "uuid": "18bb9258-a665-404c-920b-f0df4f4cf079",
              "parentUUID": "3c024005-051d-480c-9b21-d8b1d09ad18c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "The 'Provide array of unique states' API response has the correct json schema",
              "fullTitle": "Verify APIs are returning the correct response by validating its schema The 'Provide array of unique states' API response has the correct json schema",
              "timedOut": null,
              "duration": 192,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const state = window.testState;\nreturn cy\n  .then(() => state.onStartScenario(scenario, indexedSteps))\n  .then(() =>\n    resolveAndRunBeforeHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() =>\n    indexedSteps.forEach((step) =>\n      stepTest.call(this, state, step, rowData)\n    )\n  )\n  .then(() => state.onFinishScenario(scenario));",
              "err": {},
              "uuid": "15352846-9f51-43dd-b444-a2ee6b8fc91a",
              "parentUUID": "3c024005-051d-480c-9b21-d8b1d09ad18c",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "3cc52b30-d321-43ca-b528-0a9149838289",
            "01e081fe-8e31-4ad5-8cff-e15b4681aed4",
            "8980d430-2c36-437d-9575-e420408a3afc",
            "65fb9062-1b38-4748-9491-3a61075af594",
            "18bb9258-a665-404c-920b-f0df4f4cf079",
            "15352846-9f51-43dd-b444-a2ee6b8fc91a"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 5312,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "074bc423-7368-4b1d-baa6-eb7ab4347fbe",
      "title": "",
      "fullFile": "cypress/integration/Features/UI/powerPlants.feature",
      "file": "cypress/integration/Features/UI/powerPlants.feature",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "95124942-410f-41e3-bf47-9af4a4481830",
          "title": "Check Power Plants Map functionality",
          "fullFile": "cypress/integration/Features/UI/powerPlants.feature",
          "file": "cypress/integration/Features/UI/powerPlants.feature",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Check if the map is displayed",
              "fullTitle": "Check Power Plants Map functionality Check if the map is displayed",
              "timedOut": null,
              "duration": 6956,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const state = window.testState;\nreturn cy\n  .then(() => state.onStartScenario(scenario, indexedSteps))\n  .then(() =>\n    resolveAndRunBeforeHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() =>\n    indexedSteps.forEach((step) =>\n      stepTest.call(this, state, step, rowData)\n    )\n  )\n  .then(() => state.onFinishScenario(scenario));",
              "err": {},
              "uuid": "efdc9f28-c83d-4ab8-932b-0accc9d053dd",
              "parentUUID": "95124942-410f-41e3-bf47-9af4a4481830",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Check if by default 200 power plants are displayed",
              "fullTitle": "Check Power Plants Map functionality Check if by default 200 power plants are displayed",
              "timedOut": null,
              "duration": 3614,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const state = window.testState;\nreturn cy\n  .then(() => state.onStartScenario(scenario, indexedSteps))\n  .then(() =>\n    resolveAndRunBeforeHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() =>\n    indexedSteps.forEach((step) =>\n      stepTest.call(this, state, step, rowData)\n    )\n  )\n  .then(() => state.onFinishScenario(scenario));",
              "err": {},
              "uuid": "d790b79e-83d2-4e75-a745-df6a3959d068",
              "parentUUID": "95124942-410f-41e3-bf47-9af4a4481830",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Check if the slider is working properly (example #1)",
              "fullTitle": "Check Power Plants Map functionality Check if the slider is working properly (example #1)",
              "timedOut": null,
              "duration": 3381,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const state = window.testState;\nreturn cy\n  .then(() => state.onStartScenario(scenario, indexedSteps))\n  .then(() =>\n    resolveAndRunBeforeHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() =>\n    indexedSteps.forEach((step) =>\n      stepTest.call(this, state, step, rowData)\n    )\n  )\n  .then(() => state.onFinishScenario(scenario));",
              "err": {},
              "uuid": "64864d13-643a-413a-8b6b-e32f29522b33",
              "parentUUID": "95124942-410f-41e3-bf47-9af4a4481830",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Check if the slider is working properly (example #2)",
              "fullTitle": "Check Power Plants Map functionality Check if the slider is working properly (example #2)",
              "timedOut": null,
              "duration": 2706,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const state = window.testState;\nreturn cy\n  .then(() => state.onStartScenario(scenario, indexedSteps))\n  .then(() =>\n    resolveAndRunBeforeHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() =>\n    indexedSteps.forEach((step) =>\n      stepTest.call(this, state, step, rowData)\n    )\n  )\n  .then(() => state.onFinishScenario(scenario));",
              "err": {},
              "uuid": "0e4da3d7-1b39-4af0-9290-b6978d910579",
              "parentUUID": "95124942-410f-41e3-bf47-9af4a4481830",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Check if the slider is working properly (example #3)",
              "fullTitle": "Check Power Plants Map functionality Check if the slider is working properly (example #3)",
              "timedOut": null,
              "duration": 2581,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const state = window.testState;\nreturn cy\n  .then(() => state.onStartScenario(scenario, indexedSteps))\n  .then(() =>\n    resolveAndRunBeforeHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() =>\n    indexedSteps.forEach((step) =>\n      stepTest.call(this, state, step, rowData)\n    )\n  )\n  .then(() => state.onFinishScenario(scenario));",
              "err": {},
              "uuid": "292a3945-31d8-4589-9d1b-c64e9b653c62",
              "parentUUID": "95124942-410f-41e3-bf47-9af4a4481830",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Check if the slider is working properly (example #4)",
              "fullTitle": "Check Power Plants Map functionality Check if the slider is working properly (example #4)",
              "timedOut": null,
              "duration": 2570,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const state = window.testState;\nreturn cy\n  .then(() => state.onStartScenario(scenario, indexedSteps))\n  .then(() =>\n    resolveAndRunBeforeHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() =>\n    indexedSteps.forEach((step) =>\n      stepTest.call(this, state, step, rowData)\n    )\n  )\n  .then(() => state.onFinishScenario(scenario));",
              "err": {},
              "uuid": "2f2500c5-15c9-4576-b4db-c26315b9f6b1",
              "parentUUID": "95124942-410f-41e3-bf47-9af4a4481830",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Check if the slider is working properly (example #5)",
              "fullTitle": "Check Power Plants Map functionality Check if the slider is working properly (example #5)",
              "timedOut": null,
              "duration": 2512,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const state = window.testState;\nreturn cy\n  .then(() => state.onStartScenario(scenario, indexedSteps))\n  .then(() =>\n    resolveAndRunBeforeHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() =>\n    indexedSteps.forEach((step) =>\n      stepTest.call(this, state, step, rowData)\n    )\n  )\n  .then(() => state.onFinishScenario(scenario));",
              "err": {},
              "uuid": "f5499f8a-1337-4d97-91b8-deefecb3154a",
              "parentUUID": "95124942-410f-41e3-bf47-9af4a4481830",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Check if the slider is working properly (example #6)",
              "fullTitle": "Check Power Plants Map functionality Check if the slider is working properly (example #6)",
              "timedOut": null,
              "duration": 2649,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const state = window.testState;\nreturn cy\n  .then(() => state.onStartScenario(scenario, indexedSteps))\n  .then(() =>\n    resolveAndRunBeforeHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() =>\n    indexedSteps.forEach((step) =>\n      stepTest.call(this, state, step, rowData)\n    )\n  )\n  .then(() => state.onFinishScenario(scenario));",
              "err": {},
              "uuid": "eb3e3bdc-a406-429d-a9f3-528128b79eb4",
              "parentUUID": "95124942-410f-41e3-bf47-9af4a4481830",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Check if the slider is working properly (example #7)",
              "fullTitle": "Check Power Plants Map functionality Check if the slider is working properly (example #7)",
              "timedOut": null,
              "duration": 2642,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const state = window.testState;\nreturn cy\n  .then(() => state.onStartScenario(scenario, indexedSteps))\n  .then(() =>\n    resolveAndRunBeforeHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() =>\n    indexedSteps.forEach((step) =>\n      stepTest.call(this, state, step, rowData)\n    )\n  )\n  .then(() => state.onFinishScenario(scenario));",
              "err": {},
              "uuid": "3c6b0093-8fa4-44ab-890a-e8bb0e3d73d4",
              "parentUUID": "95124942-410f-41e3-bf47-9af4a4481830",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Check if the slider is working properly (example #8)",
              "fullTitle": "Check Power Plants Map functionality Check if the slider is working properly (example #8)",
              "timedOut": null,
              "duration": 2829,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const state = window.testState;\nreturn cy\n  .then(() => state.onStartScenario(scenario, indexedSteps))\n  .then(() =>\n    resolveAndRunBeforeHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() =>\n    indexedSteps.forEach((step) =>\n      stepTest.call(this, state, step, rowData)\n    )\n  )\n  .then(() => state.onFinishScenario(scenario));",
              "err": {},
              "uuid": "cf91fcbf-2fb8-4295-95f5-858070a545e7",
              "parentUUID": "95124942-410f-41e3-bf47-9af4a4481830",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Check if the slider is working properly (example #9)",
              "fullTitle": "Check Power Plants Map functionality Check if the slider is working properly (example #9)",
              "timedOut": null,
              "duration": 2852,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const state = window.testState;\nreturn cy\n  .then(() => state.onStartScenario(scenario, indexedSteps))\n  .then(() =>\n    resolveAndRunBeforeHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() =>\n    indexedSteps.forEach((step) =>\n      stepTest.call(this, state, step, rowData)\n    )\n  )\n  .then(() => state.onFinishScenario(scenario));",
              "err": {},
              "uuid": "814bbfed-6dcd-4877-926c-07ad5110057d",
              "parentUUID": "95124942-410f-41e3-bf47-9af4a4481830",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Check if the slider is working properly (example #10)",
              "fullTitle": "Check Power Plants Map functionality Check if the slider is working properly (example #10)",
              "timedOut": null,
              "duration": 2779,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const state = window.testState;\nreturn cy\n  .then(() => state.onStartScenario(scenario, indexedSteps))\n  .then(() =>\n    resolveAndRunBeforeHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() =>\n    indexedSteps.forEach((step) =>\n      stepTest.call(this, state, step, rowData)\n    )\n  )\n  .then(() => state.onFinishScenario(scenario));",
              "err": {},
              "uuid": "ce037c3a-f6cc-4d16-adc8-5f46437d0407",
              "parentUUID": "95124942-410f-41e3-bf47-9af4a4481830",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Check if the slider is working properly (example #11)",
              "fullTitle": "Check Power Plants Map functionality Check if the slider is working properly (example #11)",
              "timedOut": null,
              "duration": 2778,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const state = window.testState;\nreturn cy\n  .then(() => state.onStartScenario(scenario, indexedSteps))\n  .then(() =>\n    resolveAndRunBeforeHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() =>\n    indexedSteps.forEach((step) =>\n      stepTest.call(this, state, step, rowData)\n    )\n  )\n  .then(() => state.onFinishScenario(scenario));",
              "err": {},
              "uuid": "36919b6c-0a90-465c-80b3-98d21c6a3036",
              "parentUUID": "95124942-410f-41e3-bf47-9af4a4481830",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Check if the slider is working properly (example #12)",
              "fullTitle": "Check Power Plants Map functionality Check if the slider is working properly (example #12)",
              "timedOut": null,
              "duration": 2887,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const state = window.testState;\nreturn cy\n  .then(() => state.onStartScenario(scenario, indexedSteps))\n  .then(() =>\n    resolveAndRunBeforeHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() =>\n    indexedSteps.forEach((step) =>\n      stepTest.call(this, state, step, rowData)\n    )\n  )\n  .then(() => state.onFinishScenario(scenario));",
              "err": {},
              "uuid": "b5fb1379-c150-439d-9f2f-d70de46c2be5",
              "parentUUID": "95124942-410f-41e3-bf47-9af4a4481830",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Check if the slider is working properly (example #13)",
              "fullTitle": "Check Power Plants Map functionality Check if the slider is working properly (example #13)",
              "timedOut": null,
              "duration": 2864,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const state = window.testState;\nreturn cy\n  .then(() => state.onStartScenario(scenario, indexedSteps))\n  .then(() =>\n    resolveAndRunBeforeHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() =>\n    indexedSteps.forEach((step) =>\n      stepTest.call(this, state, step, rowData)\n    )\n  )\n  .then(() => state.onFinishScenario(scenario));",
              "err": {},
              "uuid": "5039e4a9-ec06-43ce-a403-038f800f513b",
              "parentUUID": "95124942-410f-41e3-bf47-9af4a4481830",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Check that after filter power plants by state the map is updated (example #1)",
              "fullTitle": "Check Power Plants Map functionality Check that after filter power plants by state the map is updated (example #1)",
              "timedOut": null,
              "duration": 2221,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const state = window.testState;\nreturn cy\n  .then(() => state.onStartScenario(scenario, indexedSteps))\n  .then(() =>\n    resolveAndRunBeforeHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() =>\n    indexedSteps.forEach((step) =>\n      stepTest.call(this, state, step, rowData)\n    )\n  )\n  .then(() => state.onFinishScenario(scenario));",
              "err": {},
              "uuid": "69594cf3-387b-4f51-bfc2-518e463a5238",
              "parentUUID": "95124942-410f-41e3-bf47-9af4a4481830",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Check that after filter power plants by state the map is updated (example #2)",
              "fullTitle": "Check Power Plants Map functionality Check that after filter power plants by state the map is updated (example #2)",
              "timedOut": null,
              "duration": 3178,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const state = window.testState;\nreturn cy\n  .then(() => state.onStartScenario(scenario, indexedSteps))\n  .then(() =>\n    resolveAndRunBeforeHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() =>\n    indexedSteps.forEach((step) =>\n      stepTest.call(this, state, step, rowData)\n    )\n  )\n  .then(() => state.onFinishScenario(scenario));",
              "err": {},
              "uuid": "73a0c661-b807-4730-a151-6b4e0cd5cb06",
              "parentUUID": "95124942-410f-41e3-bf47-9af4a4481830",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Check that after filter power plants by state the map is updated (example #3)",
              "fullTitle": "Check Power Plants Map functionality Check that after filter power plants by state the map is updated (example #3)",
              "timedOut": null,
              "duration": 1947,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const state = window.testState;\nreturn cy\n  .then(() => state.onStartScenario(scenario, indexedSteps))\n  .then(() =>\n    resolveAndRunBeforeHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() =>\n    indexedSteps.forEach((step) =>\n      stepTest.call(this, state, step, rowData)\n    )\n  )\n  .then(() => state.onFinishScenario(scenario));",
              "err": {},
              "uuid": "5890ad91-543a-424f-819e-a9b1f61ac97c",
              "parentUUID": "95124942-410f-41e3-bf47-9af4a4481830",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Check that after filter power plants by state the map is updated (example #4)",
              "fullTitle": "Check Power Plants Map functionality Check that after filter power plants by state the map is updated (example #4)",
              "timedOut": null,
              "duration": 2043,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const state = window.testState;\nreturn cy\n  .then(() => state.onStartScenario(scenario, indexedSteps))\n  .then(() =>\n    resolveAndRunBeforeHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() =>\n    indexedSteps.forEach((step) =>\n      stepTest.call(this, state, step, rowData)\n    )\n  )\n  .then(() => state.onFinishScenario(scenario));",
              "err": {},
              "uuid": "87856ca2-7f14-49ef-be15-c7f9ba831174",
              "parentUUID": "95124942-410f-41e3-bf47-9af4a4481830",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Check that after filter power plants by state the map is updated (example #5)",
              "fullTitle": "Check Power Plants Map functionality Check that after filter power plants by state the map is updated (example #5)",
              "timedOut": null,
              "duration": 2144,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const state = window.testState;\nreturn cy\n  .then(() => state.onStartScenario(scenario, indexedSteps))\n  .then(() =>\n    resolveAndRunBeforeHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() =>\n    indexedSteps.forEach((step) =>\n      stepTest.call(this, state, step, rowData)\n    )\n  )\n  .then(() => state.onFinishScenario(scenario));",
              "err": {},
              "uuid": "83450ce2-8a4c-4655-b1db-7086b0ddf720",
              "parentUUID": "95124942-410f-41e3-bf47-9af4a4481830",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "efdc9f28-c83d-4ab8-932b-0accc9d053dd",
            "d790b79e-83d2-4e75-a745-df6a3959d068",
            "64864d13-643a-413a-8b6b-e32f29522b33",
            "0e4da3d7-1b39-4af0-9290-b6978d910579",
            "292a3945-31d8-4589-9d1b-c64e9b653c62",
            "2f2500c5-15c9-4576-b4db-c26315b9f6b1",
            "f5499f8a-1337-4d97-91b8-deefecb3154a",
            "eb3e3bdc-a406-429d-a9f3-528128b79eb4",
            "3c6b0093-8fa4-44ab-890a-e8bb0e3d73d4",
            "cf91fcbf-2fb8-4295-95f5-858070a545e7",
            "814bbfed-6dcd-4877-926c-07ad5110057d",
            "ce037c3a-f6cc-4d16-adc8-5f46437d0407",
            "36919b6c-0a90-465c-80b3-98d21c6a3036",
            "b5fb1379-c150-439d-9f2f-d70de46c2be5",
            "5039e4a9-ec06-43ce-a403-038f800f513b",
            "69594cf3-387b-4f51-bfc2-518e463a5238",
            "73a0c661-b807-4730-a151-6b4e0cd5cb06",
            "5890ad91-543a-424f-819e-a9b1f61ac97c",
            "87856ca2-7f14-49ef-be15-c7f9ba831174",
            "83450ce2-8a4c-4655-b1db-7086b0ddf720"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 58133,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "fa473081-3324-430b-8b61-3eb3f06033d9",
      "title": "",
      "fullFile": "cypress/integration/Features/API/httpStatusCodes.feature",
      "file": "cypress/integration/Features/API/httpStatusCodes.feature",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "cdd30d04-a47f-44d1-a9ff-3136b679b683",
          "title": "Verify APIs are returning correct HTTP status codes",
          "fullFile": "cypress/integration/Features/API/httpStatusCodes.feature",
          "file": "cypress/integration/Features/API/httpStatusCodes.feature",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "The 'Search all power plants' API is returning correct status code",
              "fullTitle": "Verify APIs are returning correct HTTP status codes The 'Search all power plants' API is returning correct status code",
              "timedOut": null,
              "duration": 966,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const state = window.testState;\nreturn cy\n  .then(() => state.onStartScenario(scenario, indexedSteps))\n  .then(() =>\n    resolveAndRunBeforeHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() =>\n    indexedSteps.forEach((step) =>\n      stepTest.call(this, state, step, rowData)\n    )\n  )\n  .then(() => state.onFinishScenario(scenario));",
              "err": {},
              "uuid": "bcedc0db-db1c-4714-8cab-d517764a61cf",
              "parentUUID": "cdd30d04-a47f-44d1-a9ff-3136b679b683",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "The 'Search top N power plants' API is returning correct status code",
              "fullTitle": "Verify APIs are returning correct HTTP status codes The 'Search top N power plants' API is returning correct status code",
              "timedOut": null,
              "duration": 1503,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const state = window.testState;\nreturn cy\n  .then(() => state.onStartScenario(scenario, indexedSteps))\n  .then(() =>\n    resolveAndRunBeforeHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() =>\n    indexedSteps.forEach((step) =>\n      stepTest.call(this, state, step, rowData)\n    )\n  )\n  .then(() => state.onFinishScenario(scenario));",
              "err": {},
              "uuid": "3d2b3bd1-aded-4463-a9eb-5a086b3dbb58",
              "parentUUID": "cdd30d04-a47f-44d1-a9ff-3136b679b683",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "The 'Gives the details of a power plant' API is returning correct status code",
              "fullTitle": "Verify APIs are returning correct HTTP status codes The 'Gives the details of a power plant' API is returning correct status code",
              "timedOut": null,
              "duration": 208,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const state = window.testState;\nreturn cy\n  .then(() => state.onStartScenario(scenario, indexedSteps))\n  .then(() =>\n    resolveAndRunBeforeHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() =>\n    indexedSteps.forEach((step) =>\n      stepTest.call(this, state, step, rowData)\n    )\n  )\n  .then(() => state.onFinishScenario(scenario));",
              "err": {},
              "uuid": "ce010720-4390-41a3-adba-ddc016589ed9",
              "parentUUID": "cdd30d04-a47f-44d1-a9ff-3136b679b683",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "The 'Search power plants in a state' API is returning correct status code (example #1)",
              "fullTitle": "Verify APIs are returning correct HTTP status codes The 'Search power plants in a state' API is returning correct status code (example #1)",
              "timedOut": null,
              "duration": 436,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const state = window.testState;\nreturn cy\n  .then(() => state.onStartScenario(scenario, indexedSteps))\n  .then(() =>\n    resolveAndRunBeforeHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() =>\n    indexedSteps.forEach((step) =>\n      stepTest.call(this, state, step, rowData)\n    )\n  )\n  .then(() => state.onFinishScenario(scenario));",
              "err": {},
              "uuid": "3ee37249-908b-4e2a-a7ab-93db8b880be9",
              "parentUUID": "cdd30d04-a47f-44d1-a9ff-3136b679b683",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "The 'Search power plants in a state' API is returning correct status code (example #2)",
              "fullTitle": "Verify APIs are returning correct HTTP status codes The 'Search power plants in a state' API is returning correct status code (example #2)",
              "timedOut": null,
              "duration": 422,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const state = window.testState;\nreturn cy\n  .then(() => state.onStartScenario(scenario, indexedSteps))\n  .then(() =>\n    resolveAndRunBeforeHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() =>\n    indexedSteps.forEach((step) =>\n      stepTest.call(this, state, step, rowData)\n    )\n  )\n  .then(() => state.onFinishScenario(scenario));",
              "err": {},
              "uuid": "e39eb741-09d0-41f0-b363-ed22e18ee02d",
              "parentUUID": "cdd30d04-a47f-44d1-a9ff-3136b679b683",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "The 'Search power plants in a state' API is returning correct status code (example #3)",
              "fullTitle": "Verify APIs are returning correct HTTP status codes The 'Search power plants in a state' API is returning correct status code (example #3)",
              "timedOut": null,
              "duration": 254,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const state = window.testState;\nreturn cy\n  .then(() => state.onStartScenario(scenario, indexedSteps))\n  .then(() =>\n    resolveAndRunBeforeHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() =>\n    indexedSteps.forEach((step) =>\n      stepTest.call(this, state, step, rowData)\n    )\n  )\n  .then(() => state.onFinishScenario(scenario));",
              "err": {},
              "uuid": "3db68fee-a6f0-4df7-b227-4ffa1a2d83d3",
              "parentUUID": "cdd30d04-a47f-44d1-a9ff-3136b679b683",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "The 'Search actual and percentage of plant's federal state' API is returning correct status code (example #1)",
              "fullTitle": "Verify APIs are returning correct HTTP status codes The 'Search actual and percentage of plant's federal state' API is returning correct status code (example #1)",
              "timedOut": null,
              "duration": 222,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const state = window.testState;\nreturn cy\n  .then(() => state.onStartScenario(scenario, indexedSteps))\n  .then(() =>\n    resolveAndRunBeforeHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() =>\n    indexedSteps.forEach((step) =>\n      stepTest.call(this, state, step, rowData)\n    )\n  )\n  .then(() => state.onFinishScenario(scenario));",
              "err": {},
              "uuid": "72170658-f290-4c68-aeb7-5d224994c89b",
              "parentUUID": "cdd30d04-a47f-44d1-a9ff-3136b679b683",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "The 'Search actual and percentage of plant's federal state' API is returning correct status code (example #2)",
              "fullTitle": "Verify APIs are returning correct HTTP status codes The 'Search actual and percentage of plant's federal state' API is returning correct status code (example #2)",
              "timedOut": null,
              "duration": 115,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const state = window.testState;\nreturn cy\n  .then(() => state.onStartScenario(scenario, indexedSteps))\n  .then(() =>\n    resolveAndRunBeforeHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() =>\n    indexedSteps.forEach((step) =>\n      stepTest.call(this, state, step, rowData)\n    )\n  )\n  .then(() => state.onFinishScenario(scenario));",
              "err": {},
              "uuid": "18f66ecc-8dfb-438b-aecf-4e219cbe90b0",
              "parentUUID": "cdd30d04-a47f-44d1-a9ff-3136b679b683",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "The 'Search actual and percentage of plant's federal state' API is returning correct status code (example #3)",
              "fullTitle": "Verify APIs are returning correct HTTP status codes The 'Search actual and percentage of plant's federal state' API is returning correct status code (example #3)",
              "timedOut": null,
              "duration": 391,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const state = window.testState;\nreturn cy\n  .then(() => state.onStartScenario(scenario, indexedSteps))\n  .then(() =>\n    resolveAndRunBeforeHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() =>\n    indexedSteps.forEach((step) =>\n      stepTest.call(this, state, step, rowData)\n    )\n  )\n  .then(() => state.onFinishScenario(scenario));",
              "err": {},
              "uuid": "a8853d93-7083-4543-b1b8-843e455d3424",
              "parentUUID": "cdd30d04-a47f-44d1-a9ff-3136b679b683",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "The 'Provide array of unique states' API is returning correct status code",
              "fullTitle": "Verify APIs are returning correct HTTP status codes The 'Provide array of unique states' API is returning correct status code",
              "timedOut": null,
              "duration": 95,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const state = window.testState;\nreturn cy\n  .then(() => state.onStartScenario(scenario, indexedSteps))\n  .then(() =>\n    resolveAndRunBeforeHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() =>\n    indexedSteps.forEach((step) =>\n      stepTest.call(this, state, step, rowData)\n    )\n  )\n  .then(() => state.onFinishScenario(scenario));",
              "err": {},
              "uuid": "8f507a14-85fd-4365-a592-e269c6acd9bb",
              "parentUUID": "cdd30d04-a47f-44d1-a9ff-3136b679b683",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "bcedc0db-db1c-4714-8cab-d517764a61cf",
            "3d2b3bd1-aded-4463-a9eb-5a086b3dbb58",
            "ce010720-4390-41a3-adba-ddc016589ed9",
            "3ee37249-908b-4e2a-a7ab-93db8b880be9",
            "e39eb741-09d0-41f0-b363-ed22e18ee02d",
            "3db68fee-a6f0-4df7-b227-4ffa1a2d83d3",
            "72170658-f290-4c68-aeb7-5d224994c89b",
            "18f66ecc-8dfb-438b-aecf-4e219cbe90b0",
            "a8853d93-7083-4543-b1b8-843e455d3424",
            "8f507a14-85fd-4365-a592-e269c6acd9bb"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 4612,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "7.0.1"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": false,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "6.3.1"
    },
    "marge": {
      "options": {
        "reportDir": "cypress/htmlreport/.jsons",
        "charts": true,
        "overwrite": false,
        "showPending": false,
        "showSkipped": true,
        "saveJson": true,
        "html": false,
        "json": true
      },
      "version": "5.2.0"
    }
  }
}