{"version":3,"sources":["mocha-gherkin.js"],"names":["mochaGherkin","suite","bdd","on","context","title","fn","stories","i","push","newSuite","describe","name","clauses","forEach","clause","test","it"],"mappings":";;;;;;AAAA;;AAAA;;;;AACA;;;;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;AAyBA,kBAAA,eAAA,IAAA,SAAAA,YAAA,CAAAC,KAAA,EAAA;AACA,oBAAAC,GAAA,CAAAD,KAAA;;AAEAA,QAAAE,EAAA,CAAA,aAAA,EAAA,UAAAC,OAAA,EAAA;AACA;;;;;;;;;;;AAWA,0BAAAA,OAAA,EAAA,SAAA,EAAA,UAAAC,KAAA,EAAA;AAAA;;AACA,UAAAC,aAAA,qDAAA,CAAA,6DAAA;;AAEA,UAAAC,UAAA,IAAA;AACA,UAAA,qDAAA,CAAA,EAAA;AACAA,kBAAA,EAAA;AACA,aAAA,IAAAC,IAAA,CAAA,EAAAA,IAAA,qDAAA,CAAA,EAAAA,KAAA,CAAA,EAAA;AACAD,kBAAAE,IAAA,qBAAAD,CAAA,6BAAAA,CAAA;AACA;AACA;;AAEA,UAAAE,WAAAN,QAAAO,QAAA,eAAAN,KAAA,EAAAC,EAAA,CAAA;AACAI,eAAAE,IAAA,GAAA,SAAA;AACAF,eAAAH,OAAA,GAAAA,OAAA;;AAEA,aAAAG,QAAA;AACA,KAhBA;;AAkBA;;;;;;;AAOA,0BAAAN,OAAA,EAAA,UAAA,EAAA,UAAAC,KAAA,EAAAC,EAAA,EAAA;AACA,UAAAI,WAAAN,QAAAO,QAAA,gBAAAN,KAAA,EAAAC,EAAA,CAAA;AACAI,eAAAE,IAAA,GAAA,UAAA;;AAEA,aAAAF,QAAA;AACA,KALA;;AAOA;;;;;;;;;;;;;;AAcA,QAAAG,UAAA,CAAA,OAAA,EAAA,MAAA,EAAA,MAAA,EAAA,KAAA,EAAA,KAAA,CAAA;AACAA,YAAAC,OAAA,CAAA,UAAAC,MAAA,EAAA;AACA,4BAAAX,OAAA,EAAAW,MAAA,EAAA,UAAAV,KAAA,EAAAC,EAAA,EAAA;AACA,YAAAU,OAAAZ,QAAAa,EAAA,CAAAF,MAAA,SAAAV,KAAA,EAAAC,EAAA,CAAA;AACAU,aAAAJ,IAAA,GAAAG,MAAA;;AAEA,eAAAC,IAAA;AACA,OALA;AAMA,KAPA;AAQA,GAnEA;AAoEA,CAvEA;kBAwEA,kBAAA,eAAA,C","file":"mocha-gherkin.js","sourcesContent":["import set from 'lodash.set';\nimport { interfaces } from 'mocha';\n\n/**\n * Gherkin-style interface:\n *\n * Feature('Serve coffee',\n *   'Coffee should not be served until paid for',\n *   'Coffee should not be served until the button has been pressed',\n *   'If there is no coffee left then money should be refunded', function () {\n *   Scenario('Buy last coffee', function () {\n *     Given('there are 1 coffees left in the machine', function () {\n *       // ...\n *     });\n *     And('I have deposited 1$', function () {\n *       // ...\n *     });\n *     When('I press the coffee button', function () {\n *       // ...\n *     });\n *     Then('I should be served a coffee', function () {\n *       // ...\n *     });\n *   });\n * });\n *\n * @param {Suite} suite\n */\ninterfaces['mocha-gherkin'] = function mochaGherkin(suite) {\n  interfaces.bdd(suite);\n\n  suite.on('pre-require', (context) => {\n    /**\n     * Some terse yet descriptive text of what is desired.\n     *\n     * @param {String} title\n     * @param {...Mixed} args\n     *   Textual description of the business value of this feature.\n     *     Business rules that govern the scope of the feature.\n     *     Any additional information that will make the feature easier to understand.\n     *   and a function to test.\n     * @return {Suite} newSuite\n     */\n    set(context, 'Feature', (title, ...args) => {\n      const fn = args[args.length - 1];\n\n      let stories = null;\n      if (args.length > 1) {\n        stories = [];\n        for (let i = 0; i < args.length - 1; i += 1) {\n          stories.push(args[i]);\n        }\n      }\n\n      const newSuite = context.describe(`Feature: ${title}`, fn);\n      newSuite.name = 'Feature';\n      newSuite.stories = stories;\n\n      return newSuite;\n    });\n\n    /**\n     * Some determinable business situation.\n     *\n     * @param {String} title\n     * @param {Function} fn\n     * @return {Suite} newSuite\n     */\n    set(context, 'Scenario', (title, fn) => {\n      const newSuite = context.describe(`Scenario: ${title}`, fn);\n      newSuite.name = 'Scenario';\n\n      return newSuite;\n    });\n\n    /**\n     * Given some precondition\n     * And some other precondition\n     * When some action by the actor\n     * And some other action\n     * And yet another action\n     * Then some testable outcome is achieved\n     * And something else we can check happens too\n     * But yet another we can check does not happen\n     *\n     * @param {String} title\n     * @param {Function} fn\n     * @return {Suite} test\n     */\n    const clauses = ['Given', 'When', 'Then', 'And', 'But'];\n    clauses.forEach((clause) => {\n      set(context, clause, (title, fn) => {\n        const test = context.it(`${clause} ${title}`, fn);\n        test.name = clause;\n\n        return test;\n      });\n    });\n  });\n};\nexport default interfaces['mocha-gherkin'];\n"],"sourceRoot":"../src"}